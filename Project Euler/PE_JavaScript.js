/*
**    Problem 1
** If we list all the natural numbers below 10 that are multiples of 3 or 5,
** we get 3, 5, 6 and 9. The sum of these multiples is 23.
** Find the sum of all the multiples of 3 or 5 below 1000.
*/
function problem1() {
  let sum = 0;
  for (let i = 0; i < 1000; i++) {
    if (i % 3 === 0 || i % 5 === 0) {
      sum += i;
    }
  }
  return sum;
}
console.log(problem1()); // returns 233168

/*
**    Problem 2
** Each new term in the Fibonacci sequence is generated by adding the
** previous two terms. By starting with 1 and 2, the first 10 terms will be:
** 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
** By considering the terms in the Fibonacci sequence whose values do not
** exceed four million, find the sum of the even-valued terms.
*/
function problem2(n) { // computes a Fibonacci number
  // Initialize the cache if it doesn't already exist
  if (!problem2.hasOwnProperty('cache')) {
    problem2.cache = [
      0, // n === 0
      1, // n === 1
    ];
  }
  // Store the sum in the cache if it doesn't already have it
  if (!problem2.cache.hasOwnProperty(n)) {
    // Recursively call on n - 1 and n - 2 and store the sum in the cache
    problem2.cache[n] = problem2(n - 1) + problem2(n - 2);
  }
  // Return the result from the cache
  return problem2.cache[n];
}

console.log(problem2(12));
